version: '3.8'

services:
  # MongoDB as database
  mongodb:
    image: mongo:5.0
    container_name: mongodb
    volumes:
      - ./volumes/vmongo:/data/db
    ports:
      - "27017:27017"
    
  # FastAPI as API
  api:
    build: ./api
    container_name: api
    ports:
      - "8000:8000"
    depends_on:
      - mongodb

  # Data extractor robot
  robot:
    build: ./robot
    env_file: ./robot/.env
    container_name: robot
    depends_on: 
      - mongodb
      - api
  
  # User interface
  front:
    build: ./front
    container_name: front
    command: npm start
    ports:
      - "3000:3000"
    depends_on:
      - api
      - keycloak

  # Keycloak for User authentification
  keycloak:
    image: quay.io/keycloak/keycloak:15.0.0
    container_name: auth
    ports:
      - "8080:8080"
      - "9991:9990"
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=postgres
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_ADDR=postgres
      - DB_DATABASE=keycloak
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/dsaster-realm.json
    depends_on:
      - postgres
    volumes:
      - ./setup/dsaster-realm.json:/opt/jboss/keycloak/dsaster-realm.json

  # PostgreSQL as Keycloak & Kong database
  postgres:
    image: postgres:12
    container_name: postgresqldb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - ./setup/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./volumes/vutility:/var/lib/postgresql/data
  
  #Â Kong setup
  gateway-prep:
    image: kong:2.6.0-alpine
    container_name: gateway-prep
    command: kong migrations bootstrap && kong migrations finish
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgresqldb
      KONG_PG_USER: user
      KONG_PG_PASSWORD: password
      KONG_PG_DATABASE: kong
    depends_on:
      - postgres
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  # Kong as API Gateway for APIs and Microservices
  gateway:
    image: kong:2.6.0-alpine
    container_name: gateway
    ports:
      - "8001:8001"
      - "8002:8002"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgresqldb
      KONG_PG_USER: user
      KONG_PG_PASSWORD: password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8002}"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
    restart: on-failure
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres

  # Kong services setup
  gateway-setup:
    container_name: gateway-setup
    build: ./setup
    depends_on:
      - gateway

networks:
  default:
    driver: bridge

volumes:
  vmongo:
  vutility:
